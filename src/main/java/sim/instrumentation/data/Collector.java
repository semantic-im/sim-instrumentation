/*
 * Copyright 2010 Softgress - http://www.softgress.com/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sim.instrumentation.data;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.concurrent.ConcurrentLinkedQueue;

import sim.data.MethodMetrics;

/**
 * Thread safe class used to collect all the events/measurements generated by
 * instrumented code.
 * 
 * @author mcq
 * 
 */
public class Collector {
	private static ConcurrentLinkedQueue<MethodMetrics> measurements = new ConcurrentLinkedQueue<MethodMetrics>();

	public static void addMeasurement(MethodMetrics measurement) {
		measurements.add(measurement);
	}

	static {
		AgentComunicator ac = new AgentComunicator();
		ac.start();
	}

	private static class AgentComunicator extends Thread {
		private static final String agentLocation = "http://localhost:8088/agent";
		private static final long COLLECT_INTERVAL = 5000;

		public AgentComunicator() {
			super("SIM - AgentComunicator");
			setDaemon(true);
		}

		@Override
		public void run() {
			while (true) {
				try {
					sleep(COLLECT_INTERVAL);
				} catch (InterruptedException e) {
					break;
				}
				while (!measurements.isEmpty()) {
					sendMeasurement(measurements.remove());
				}
			}
		}

		private void sendMeasurement(MethodMetrics measurement) {
			try {
				URL agentURL = new URL(agentLocation);
				URLConnection agentConnection = agentURL.openConnection();
				agentConnection.setDoInput(true);
				agentConnection.setDoOutput(true);
				agentConnection.setUseCaches(false);
				ObjectOutputStream agentDataStream = new ObjectOutputStream(agentConnection.getOutputStream());
				agentDataStream.writeObject(measurement);
				agentDataStream.flush();
				agentDataStream.close();
				BufferedReader agentResponseStream = new BufferedReader(new InputStreamReader(
						agentConnection.getInputStream()));
				String agentResponse = agentResponseStream.readLine();
				agentResponseStream.close();
				if (!"SUCCESS".equalsIgnoreCase(agentResponse)) {
					System.out.println("SIM - agent communication failure: " + agentResponse);
				}
			} catch (IOException e) {
				System.out.println("SIM - agent communication failure: " + e.getMessage());
			}
		}
	}
}
