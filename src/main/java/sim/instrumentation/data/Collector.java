/*
 * Copyright 2010 Softgress - http://www.softgress.com/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sim.instrumentation.data;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicLong;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sim.data.Context;
import sim.data.MethodMetrics;
import sim.data.Metrics;
import sim.data.PlatformMetrics;

/**
 * Thread safe class used to collect all the events/measurements generated by
 * instrumented code.
 * 
 * It also starts a thread that every 5 seconds tries to connect to the agent
 * and send all collected measurements.
 * 
 * @author mcq
 * 
 */
public class Collector {
	private static final Logger log = LoggerFactory.getLogger(Collector.class);
	private static final ConcurrentLinkedQueue<Metrics> measurements = new ConcurrentLinkedQueue<Metrics>();
	private static final AtomicLong counter = new AtomicLong(0);
	private static final Object lock = new Object();

	public static void addMeasurement(MethodMetrics methodMetric) {
		if (methodMetric == null)
			return;
		if (methodMetric.getWallClockTime() > ConfigParams.MEASURABLE_THRESHOLD) {
			if (log.isDebugEnabled())
				log.debug(methodMetric.toString());
			measurements.add(methodMetric);
			flush(counter.incrementAndGet());
		}
	}

	public static void addMeasurement(Context context) {
		if (context == null)
			return;
		if (log.isDebugEnabled())
			log.debug(context.toString());
		measurements.add(context);
		flush(counter.incrementAndGet());
	}

	public static void addMeasurement(PlatformMetrics pm) {
		if (pm == null)
			return;
		if (log.isDebugEnabled())
			log.debug(pm.toString());
		measurements.add(pm);
		flush(counter.incrementAndGet());
	}

	private static void flush(long count) {
		if (count >= ConfigParams.AGENT_COMMUNICATION_BUFFER_SIZE) {
			if (log.isDebugEnabled())
				log.debug(
						"got {} measurements - signal agent comunicator thread to send measurements to the agent",
						count);
			synchronized (lock) {
				lock.notify();
			}
		}
	}

	static {
		AgentComunicator ac = new AgentComunicator();
		ac.start();

		PlatformMetricsReader.start();
	}

	private static class AgentComunicator extends Thread {
		private static final Logger log = LoggerFactory.getLogger(AgentComunicator.class);

		public AgentComunicator() {
			super("SIM - AgentComunicator");
			setDaemon(true);
		}

		@Override
		public void run() {
			while (true) {
				try {
					synchronized (lock) {
						lock.wait(ConfigParams.AGENT_COMMUNICATION_TIME_DELAY);
					}
				} catch (InterruptedException e) {
					break;
				}
				if (!measurements.isEmpty())
					sendMeasurements();
			}
		}

		private void sendMeasurements() {
			log.info("sending measurements to the agent");
			ObjectOutputStream agentDataStream = null;
			BufferedReader agentResponseStream = null;
			try {
				URL agentURL = new URL(ConfigParams.AGENT_LOCATION);
				URLConnection agentConnection = agentURL.openConnection();
				agentConnection.setConnectTimeout(ConfigParams.AGENT_COMMUNICATION_TIMEOUT);
				agentConnection.setReadTimeout(ConfigParams.AGENT_COMMUNICATION_TIMEOUT);
				agentConnection.setDoInput(true);
				agentConnection.setDoOutput(true);
				agentConnection.setUseCaches(false);
				agentDataStream = new ObjectOutputStream(agentConnection.getOutputStream());
				int count = 0;
				while (true) {
					Metrics m = measurements.poll();
					if (m == null)
						break;
					agentDataStream.writeObject(m);
					count++;
					if (count >= ConfigParams.AGENT_COMMUNICATION_BUFFER_SIZE)
						break;
				}
				counter.addAndGet(0 - count);
				log.info("{} measurements sent to the agent", count);
				agentDataStream.flush();
				agentDataStream.close();
				agentDataStream = null;
				agentResponseStream = new BufferedReader(new InputStreamReader(
						agentConnection.getInputStream()));
				String agentResponse = agentResponseStream.readLine();
				agentResponseStream.close();
				agentResponseStream = null;
				if (!"SUCCESS".equalsIgnoreCase(agentResponse)) {
					log.error("SIM-instrumentation: agent communication failure1: " + agentResponse);
				}
			} catch (IOException e) {
				log.error("SIM-instrumentation: agent communication failure2: " + e.getMessage());
			} finally {
				if (agentDataStream != null) {
					try {
						agentDataStream.close();
					} catch (IOException e) {
						log.error("SIM-instrumentation: closing agent data stream error: " + e.getMessage());
					}
				}
				if (agentResponseStream != null) {
					try {
						agentResponseStream.close();
					} catch (IOException e) {
						log.error("SIM-instrumentation: closing agent response stream error: "
								+ e.getMessage());
					}
				}
			}
		}
	}
}
